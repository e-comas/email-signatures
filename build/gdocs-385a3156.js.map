{"version":3,"file":"gdocs-385a3156.js","sources":["../../src/gdocs.js"],"sourcesContent":["// Client ID and API key from the Developer Console\nimport gAPICredentials from \"./gAPICredentials.json\";\nconst { CLIENT_ID, API_KEY } = gAPICredentials;\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nconst SCOPES = [\"/auth/documents\", \"/auth/userinfo.email\"]\n  .map((scope) => `https://www.googleapis.com${scope}`)\n  .join(\" \");\n\n/**\n *  On load, called to load the auth2 library and API client library.\n */\nfunction handleClientLoad() {\n  return gapi.load(\"client:auth2\", initClient);\n}\n\nlet initClientResolve, initClientReject;\nexport const initClientPromise = new Promise((resolve, reject) => {\n  initClientResolve = resolve;\n  initClientReject = reject;\n});\ninitClientPromise.catch(console.error);\n/**\n *  Initializes the API client library and sets up sign-in state\n *  listeners.\n */\nasync function initClient() {\n  await gapi.client\n    .init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: [\"https://docs.googleapis.com/$discovery/rest?version=v1\"],\n      scope: SCOPES,\n    })\n    .then(initClientResolve, initClientReject);\n\n  // Listen for sign-in state changes.\n  gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n  // Handle the initial sign-in state.\n  updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n}\n\nlet connectStatusPromise,\n  connectStatus,\n  resolveConnectStatus = Function.prototype;\nfunction updateSigninStatus(isSignedIn) {\n  console.log(\"status\", isSignedIn);\n  connectStatus = isSignedIn;\n  connectStatusPromise = new Promise((resolve) => {\n    resolveConnectStatus(isSignedIn);\n    resolveConnectStatus = resolve;\n  });\n}\nupdateSigninStatus(undefined); // Initialize connection status\nexport async function* subscribeToConnectionStatus() {\n  if (connectStatus !== undefined) yield connectStatus;\n  while (true) {\n    const status = await connectStatusPromise;\n    yield status;\n  }\n}\n\n/**\n *  Sign in the user upon button click.\n */\nexport function connect() {\n  return gapi.auth2.getAuthInstance().signIn();\n}\n\n/**\n *  Sign out the user upon button click.\n */\nexport function disconnect() {\n  return gapi.auth2.getAuthInstance().signOut();\n}\n\nimport \"https://apis.google.com/js/api.js\";\nhandleClientLoad();\n"],"names":["CLIENT_ID","API_KEY","gAPICredentials","SCOPES","map","scope","join","initClientResolve","initClientReject","initClientPromise","Promise","resolve","reject","async","initClient","gapi","client","init","apiKey","clientId","discoveryDocs","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","catch","console","error","connectStatusPromise","connectStatus","resolveConnectStatus","Function","prototype","log","subscribeToConnectionStatus","undefined","status","connect","signIn","disconnect","signOut","load"],"mappings":"iFAEA,MAAMA,UAAEA,EAASC,QAAEA,GAAYC,EAIzBC,EAAS,CAAC,kBAAmB,wBAChCC,KAAKC,GAAU,6BAA6BA,MAC5CC,KAAK,KASR,IAAIC,EAAmBC,EACX,MAACC,EAAoB,IAAIC,SAAQ,CAACC,EAASC,KACrDL,EAAoBI,EACpBH,EAAmBI,KAOrBC,eAAeC,UACPC,KAAKC,OACRC,KAAK,CACJC,OAAQjB,EACRkB,SAAUnB,EACVoB,cAAe,CAAC,0DAChBf,MAAOF,IAERkB,KAAKd,EAAmBC,GAG3BO,KAAKO,MAAMC,kBAAkBC,WAAWC,OAAOC,GAG/CA,EAAmBX,KAAKO,MAAMC,kBAAkBC,WAAWG,OAnB7DlB,EAAkBmB,MAAMC,QAAQC,OAsBhC,IAAIC,EACFC,EACAC,EAAuBC,SAASC,UAClC,SAAST,EAAmBF,GAC1BK,QAAQO,IAAI,SAAUZ,GACtBQ,EAAgBR,EAChBO,EAAuB,IAAIrB,SAASC,IAClCsB,EAAqBT,GACrBS,EAAuBtB,KAIpBE,eAAgBwB,IAErB,SADsBC,IAAlBN,UAAmCA,KAC1B,CACX,MAAMO,QAAeR,QACfQ,GAOH,SAASC,IACd,OAAOzB,KAAKO,MAAMC,kBAAkBkB,SAM/B,SAASC,IACd,OAAO3B,KAAKO,MAAMC,kBAAkBoB,UApBtCjB,OAAmBY,GAzCVvB,KAAK6B,KAAK,eAAgB9B"}